name: Vulnerability Check

on:
  schedule:
    - cron: '0 0 * * 1'  # Run weekly on Mondays
  workflow_dispatch:  # Allow manual trigger

jobs:
  check_vulnerabilities:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Check for open Mend vulnerability issues
      id: mend_check
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'Mend: dependency security vulnerability'
          });
          
          if (issues.length > 0) {
            core.setOutput('has_mend_issues', 'true');
            let body = "The following Mend vulnerability issues are open:\n\n";
            for (const issue of issues) {
              body += `- ${issue.title}\n`;
              body += `  URL: ${issue.html_url}\n\n`;
            }
            core.setOutput('mend_notification', body);
          } else {
            core.setOutput('has_mend_issues', 'false');
          }

    - name: Notify about open Mend issues
      if: steps.mend_check.outputs.has_mend_issues == 'true'
      run: |
        echo "::notice::Open Mend Vulnerability Issues Detected"
        echo "${{ steps.mend_check.outputs.mend_notification }}"

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install safety
      run: pip install safety

    - name: Run safety check
      id: safety_check
      continue-on-error: true
      run: safety check -r requirements.txt --full-report --output json > safety_report.json

    - name: Process safety check results
      id: process_safety
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs');
          const safetyReport = JSON.parse(fs.readFileSync('safety_report.json', 'utf8'));
          
          if (safetyReport.vulnerabilities && safetyReport.vulnerabilities.length > 0) {
            let body = "The following vulnerabilities were found in requirements.txt:\n\n";
            for (const vuln of safetyReport.vulnerabilities) {
              body += `- Package: ${vuln.package_name}\n`;
              body += `  Installed version: ${vuln.installed_version}\n`;
              body += `  Vulnerable below version: ${vuln.vulnerable_below}\n`;
              body += `  Description: ${vuln.description}\n\n`;
            }
            core.setOutput('has_vulnerabilities', 'true');
            core.setOutput('safety_notification', body);
          } else {
            core.setOutput('has_vulnerabilities', 'false');
          }

    - name: Notify about safety check vulnerabilities
      if: steps.process_safety.outputs.has_vulnerabilities == 'true'
      run: |
        echo "::warning::Vulnerabilities Detected in requirements.txt"
        echo "${{ steps.process_safety.outputs.safety_notification }}"

    - name: Notify if no vulnerabilities found
      if: steps.mend_check.outputs.has_mend_issues == 'false' && steps.process_safety.outputs.has_vulnerabilities == 'false'
      run: echo "::notice::No vulnerabilities detected in Mend issues or requirements.txt"
